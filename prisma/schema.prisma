// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Reset migrations by deleting prisma/migrations folder and running:
// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums

enum ArtifactType {
    IMAGE
    DOCUMENT
}

enum Mimetype {
    IMAGE_PNG
    IMAGE_JPEG
    IMAGE_JPG
    IMAGE_WEBP
    IMAGE_SVG
    IMAGE_GIF
    IMAGE_TIFF
    APPLICATION_PDF
    APPLICATION_DOCX
    APPLICATION_MSWORD
}

// Models
// Set up relationship
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations#the-relation-attribute
// Use Prisma with Sveltekit
// https://www.prisma.io/blog/sveltekit-prisma-kvCOEoeQlC

// Generate custom id using prisma middleware
// https://github.com/prisma/prisma/issues/6719#issuecomment-1178211695

// Cascade delete
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-actions

model ArtifactCollection {
    // id String @id @default(uuid())
    // We are generating id using prisma middleware
    // see /src/lib/prisma.js generateShortUniqueId function
    id String @id 
    label String?
    artifacts Artifact[]
    processed Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Artifact {
    // id String @id @default(uuid())
    // We are generating id using prisma middleware
    // see /src/lib/prisma.js generateShortUniqueId function
    id String @id 
    label String?
    type ArtifactType
    mimetype Mimetype
    url String?
    collection ArtifactCollection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String?
    kmeansColors KmeansColors? //@relation(fields: [kmeansColorsId], references: [id])
    kmeansColorsId String? @unique
    cmyk CMYK? //@relation(fields: [cmykId], references: [id])
    cmykId String? @unique
    pages Int? @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model KmeansColors {
    id String @id
    artifact Artifact? @relation(fields: [artifactId], references: [id], onDelete: Cascade)
    artifactId String? @unique
    colors Json
    // colors Color[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Color {
//     id String @id
//     hex String
//     rgb String
//     cmyk String
//     percentage Float
//     cluster KmeansColors? @relation(fields: [clusterId], references: [id])
//     clusterId String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model CMYK {
    id String @id
    artifact Artifact? @relation(fields: [artifactId], references: [id], onDelete: Cascade)
    artifactId String? @unique
    // total String
    // whiteSpace Float
    // coloredSpace Float
    // summary Json
    info Json
    // summary CMYKSummary[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model CMYKSummary {
//     id String @id
//     cmyk CMYK @relation(fields: [cmykId], references: [id])
//     cmykId String
// }

// Lucia Models
// Model name are explicitly to be named as AuthUser, AuthSession and AuthKey, since this is called by lucia under the hood.
// Source code: @lucia-auth/adapter-prisma/index.js:146:54
// Table names can be customized using @@map, this will map the Schema to the table name defined in @@map
// https://lucia-auth.com/adapters/prisma?sveltekit#models

model AuthUser {
    id String @id @unique
    name String?
    picture String?
    auth_session AuthSession[]
    auth_key AuthKey[]

    @@map("LuciaUser")
}

model AuthSession {
    id String @id @unique
    user_id String
    active_expires BigInt
    idle_expires BigInt
    auth_user AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("LuciaSession")
}

model AuthKey {
    id String @id @unique
    hashed_password String?
    user_id String
    primary_key Boolean
    expires BigInt?
    auth_user AuthUser? @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("LuciaKey")
}
